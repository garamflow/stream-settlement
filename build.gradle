plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

// 프로젝트 기본 설정
group = 'com.github.garamflow'
version = '0.0.1-SNAPSHOT'

// Java 버전 설정
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Lombok 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Spring Batch 버전 관리
dependencyManagement {
    imports {
        mavenBom "org.springframework.batch:spring-batch-bom:5.1.2"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // 캐시 관련
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.5'
    
    // 보안 관련
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    
    // 템플릿 엔진
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    
    // 환경 설정
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // 개발 도구
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // 데이터베이스
    runtimeOnly 'com.mysql:mysql-connector-j'
    
    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    
    // 테스트 관련
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.jfree:jfreechart:1.5.4'
}

// QueryDSL 설정
def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
    options.compilerArgs += ['-parameters']
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}

// 테스트 설정
tasks.named('test') {
    useJUnitPlatform()
}
